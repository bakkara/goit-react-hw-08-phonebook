{"version":3,"file":"static/js/880.6d9196ba.chunk.js","mappings":"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","sources":["components/Contact/Contact.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactModal/ContactModal.styled.js","components/ContactModal/ContactModal.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.js","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContactWrapper = styled.div`\npadding: ${({ theme }) => theme.spacing(10)};\n  background-color: ${({ theme }) => theme.colors.light};\n  border-radius: ${({ theme }) => theme.spacing(2)};\n\n  color: ${({ theme }) => theme.colors.gray};\n  box-shadow: ${({ theme }) => theme.shadows.regular};\n\n  position: relative;\n  width: 100%;\n  height: 100%;`\n  \n  export const DeleteButton = styled.button`\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  padding: ${({ theme }) => theme.spacing(2.5)};\n  transition: transform ${({ theme }) => theme.animation.cubicBezier};\n\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n  }\n`;\n\nexport const EditButton = styled.button`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n\n  padding: ${({ theme }) => theme.spacing(2.5)};\n\n  transition: transform ${({ theme }) => theme.animation.cubicBezier};\n\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n  }\n`;\n\nexport const TextContact = styled.div`\n    color: #4e4e4e;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;`","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = ({ contacts: {items} }) => items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n      return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);","import { Formik } from \"formik\";\nimport * as Yup from 'yup';\nimport { Button, ErrorMsg, Label, StyledField, StyledForm } from \"./ContactForm.styled\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { toast } from \"react-hot-toast\";\n\n\n export const ContactSchema = Yup.object().shape({\n    name: Yup.string()\n    .test(\n      \"name\",\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n      value => /^[a-zA-Zа-яА-ЯёЁіІїЇ ]+((['][a-zA-Zа-яА-ЯёЁіІїЇ ])?[a-zA-Zа-яА-ЯёЁіІїЇ]*)*$/.test(value)\n    )\n    .required('Required'),\n    number: Yup.string()\n    .test(\n      \"number\",\n      \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n      value =>\n        /\\+?[0-9\\s.\\-()]{1,}$/.test(\n          value\n        )\n    )\n    .required('Required'),\n });\n\nexport const ContactForm = () => {\n    const contacts = useSelector(selectContacts);\n    const dispatch = useDispatch();\n\n    const handleSubmit = (contact, actions)=> {\n        const isExist = contacts.some(\n        item => item.name.toLowerCase() === contact.name.toLowerCase()\n            || item.number === contact.number\n        );\n    \n        if (isExist) {\n           toast.error(`${contact.name} or ${contact.number} is already in contacts.`);\n            return;\n        }\n        toast.success(`Contact ${contact.name} with number ${contact.number} is added to the phonebook!`);\n        dispatch(addContact(contact));\n        actions.resetForm();\n  };\n    return (\n        <Formik\n            initialValues={\n                {\n                    name: \"\",\n                    number: \"\",\n                }}\n            onSubmit={(contact, actions) => handleSubmit(contact, actions)}\n            validationSchema={ContactSchema}\n        >\n            <StyledForm>\n                 <Label> Name:\n                <StyledField name=\"name\" type=\"text\" />\n                    <ErrorMsg name=\"name\" component=\"div\"/>\n                </Label>\n                <Label> Number: \n                <StyledField name=\"number\" type=\"tel\" />\n                    <ErrorMsg name=\"number\" component=\"div\"/>\n                    </Label>\n                <Button type=\"submit\">Add contact</Button>\n            </StyledForm>\n        </Formik >\n    )\n}\n\n","import styled from 'styled-components';\nexport const customStyles = {\n        overlay: {\n              position: 'fixed',\n              top: '0',\n              left: '0',\n              width: '100vw',\n              height: '100vh',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              backgroundColor: 'rgba(229, 227, 234, 0.8)',\n              zIndex: '1200',        \n},\n        content: {\n            top: '50%', \n            left: '50%', \n            right: 'auto',\n            bottom: 'auto',\n            transform: 'translate(-50%, -50%)', \n            padding: '0', \n            border: 'none', \n            maxWidth: 'calc(100vw - 48px)',\n            maxHeight: 'calc(100vh - 24px)',\n            overflow: 'hidden',\n        },\n};\n\nexport const ModalContainer = styled.div`\n            /* display: flex;\n            flex-direction: column;\n            gap: 10px;\n            padding: 20px; */\n            padding: ${({ theme }) => theme.spacing(10)};\n  background-color: ${({ theme }) => theme.colors.light};\n  border-radius: ${({ theme }) => theme.spacing(2)};\n\n  color: ${({ theme }) => theme.colors.black};\n  box-shadow: ${({ theme }) => theme.shadows.regular};\n\n  position: relative;\n  width: 100%;\n  height: 100%;`\n\n  export const CancelButton = styled.button`\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  padding: ${({ theme }) => theme.spacing(2.5)};\n  transition: transform ${({ theme }) => theme.animation.cubicBezier};\n\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n  }\n`;\n\nexport const SaveButton = styled.button`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n\n  padding: ${({ theme }) => theme.spacing(2.5)};\n\n  transition: transform ${({ theme }) => theme.animation.cubicBezier};\n\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n  }\n`;\n    \n","import { ContactSchema } from \"components/ContactForm/ContactForm\";\nimport { ErrorMsg, Label, StyledField, StyledForm } from \"components/ContactForm/ContactForm.styled\";\nimport { Formik } from \"formik\";\nimport Modal from \"react-modal\";\nimport { useDispatch } from \"react-redux\";\nimport { editContact } from 'redux/contacts/operations';\nimport { customStyles, ModalContainer, SaveButton, CancelButton } from \"./ContactModal.styled\";\nimport { RiSaveLine } from 'react-icons/ri';\nimport { MdCancelPresentation } from 'react-icons/md';\n\nconst ContactEditModal = ({ isOpen, contact, onRequestClose }) => {\n   const initialValues = {\n    id: contact.id,\n    name: contact.name,\n    number: contact.number,\n  };\n  const dispatch = useDispatch();\n\n  const handleSave = (values) => {\n    dispatch(editContact(values));\n    onRequestClose();\n};\n  return (\n      <Modal\n      isOpen={isOpen}\n      onRequestClose={onRequestClose}\n          style={customStyles}>\n          <ModalContainer>\n        <h2>Edit Contact</h2>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={ContactSchema}\n          onSubmit={handleSave}\n        >\n          <StyledForm>\n            <div>\n              <Label>Name:</Label>\n              <StyledField type=\"text\" name=\"name\" />\n              <ErrorMsg name=\"name\" component=\"div\" />\n            </div>\n            <div>\n              <Label>Phone:</Label>\n              <StyledField type=\"tel\" name=\"number\" />\n              <ErrorMsg name=\"number\" component=\"div\" />\n            </div>\n            <div>\n              <SaveButton type=\"submit\"><RiSaveLine size={24}/></SaveButton>\n            <CancelButton onClick={onRequestClose}><MdCancelPresentation size={24}/></CancelButton>\n                          \n            </div>\n          </StyledForm>\n              </Formik>\n          </ModalContainer>\n      </Modal>\n  );\n};\n\nexport default ContactEditModal;","\nimport { ContactWrapper, DeleteButton, EditButton, TextContact } from \"./Contact.styled\"\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useState } from \"react\";\nimport ContactEditModal from \"components/ContactModal/ContactModal\";\nimport { RiDeleteBinLine, RiEditLine } from 'react-icons/ri';\n\nexport const Contact = ({\n    contact: { id, name, number },\n}) => {\n  const dispatch = useDispatch();\n  \n  const [isEditing, setIsEditing] = useState(false);\n\n  const handleEditClick = () => {\n    setIsEditing(true);\n  };\n\n  const handleEditModalClose = () => {\n    setIsEditing(false);\n  };\n    return (\n      <ContactWrapper>\n        <TextContact>\n          <p>{name}: </p>\n          <p> {number}</p>\n        </TextContact>\n        \n        <DeleteButton onClick={() => dispatch(deleteContact(id))}><RiDeleteBinLine size={24} /></DeleteButton>\n        <EditButton onClick={handleEditClick}><RiEditLine size={24}/></EditButton>\n      {isEditing && (\n          <ContactEditModal\n            isOpen = {isEditing}\n          contact={{ id, name, number }}\n          onRequestClose={handleEditModalClose}\n        />\n      )}\n        </ContactWrapper>\n    )\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n    /* margin-left: 20px; */\n     display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n     grid-gap: ${({ theme }) => theme.spacing(5)};\n`\nexport const ListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n    display: block;\n    margin-top: 8px;\n    \n    &:focus-visible{\n        outline: 1px solid blue;\n    }`","import { Input } from \"./Filter.styled\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filtersSlice';\n\nexport const Filter = () => {\n  \n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n    return (\n        <div>\n            <label htmlFor=\"filter\">Find contacts by name\n              <Input\n                  name=\"filter\"\n                  type=\"text\"\n                  value={filter}\n              \n                  onChange={evt => dispatch(setFilter(evt.target.value))}\n                  placeholder=\"Search contact\"\n                  />\n            </label>\n    </div>\n  );\n  \n}\n","import { Contact } from \"components/Contact/Contact\"\nimport { List, ListItem } from \"./ContactList.styled\"\nimport {useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { Filter } from \"components/Filter/Filter\";\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\nconst sortedContacts = contacts.sort((a, b) => a.name.localeCompare(b.name));\n  return (\n    <>\n      <Filter/>\n     <List>\n        {sortedContacts.map(item => (\n            <ListItem key={item.id}>\n            <Contact contact={item}/>\n            </ListItem>\n      ))}\n      </List>\n    </>\n )\n}\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n      <div>{isLoading && <Loader/>}</div>\n      <ContactList />\n    </>\n  );\n}"],"names":["ContactWrapper","styled","_templateObject","_taggedTemplateLiteral","_ref","theme","spacing","_ref2","colors","light","_ref3","_ref4","gray","_ref5","shadows","regular","DeleteButton","_templateObject2","_ref6","_ref7","animation","cubicBezier","EditButton","_templateObject3","_ref8","_ref9","TextContact","_templateObject4","selectContacts","contacts","items","selectIsLoading","state","isLoading","selectFilter","filter","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","ContactSchema","Yup","shape","test","value","required","number","ContactForm","useSelector","dispatch","useDispatch","_jsx","Formik","initialValues","onSubmit","actions","some","item","toast","concat","addContact","resetForm","handleSubmit","validationSchema","children","_jsxs","StyledForm","Label","StyledField","type","ErrorMsg","component","Button","customStyles","overlay","position","top","left","width","height","display","justifyContent","alignItems","backgroundColor","zIndex","content","right","bottom","transform","padding","border","maxWidth","maxHeight","overflow","ModalContainer","black","CancelButton","SaveButton","isOpen","onRequestClose","id","Modal","style","values","editContact","RiSaveLine","size","onClick","MdCancelPresentation","Contact","_ref$contact","_useState","useState","_useState2","_slicedToArray","isEditing","setIsEditing","deleteContact","RiDeleteBinLine","RiEditLine","ContactEditModal","List","ListItem","Input","Filter","htmlFor","onChange","evt","setFilter","target","placeholder","ContactList","sortedContacts","sort","a","b","localeCompare","_Fragment","map","Contacts","useEffect","fetchContacts","Loader"],"sourceRoot":""}